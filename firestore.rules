rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Basic user profile rules
    match /users/{userId} {
      // Allow read and write if the request is from the authenticated user that owns the document
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow admin access (you can expand this with proper admin authentication later)
      // allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      // Uploads subcollection rules
      match /uploads/{uploadId} {
        // Allow read and write if the request is from the authenticated user that owns the parent document
        allow read, write: if request.auth != null && request.auth.uid == userId;
        
        // Validate upload document structure
        allow create: if request.auth != null && 
                         request.auth.uid == userId && 
                         request.resource.data.keys().hasAll(['fileName', 'uploadDate', 'fileType', 'fileUrl', 'inputFields']) &&
                         request.resource.data.inputFields is number &&
                         (request.resource.data.inputFields <= getUserPlanLimit());
        
        // Function to get user's plan limits
        function getUserPlanLimit() {
          let userPlan = get(/databases/$(database)/documents/users/$(userId)).data.planType;
          return userPlan == 'free' ? 5 : 
                 userPlan == 'basic' ? 20 : 
                 userPlan == 'premium' ? 100 : 5; // Default to free plan limit
        }
      }
    }
    
    // Other collection rules can be added here
    
    // Deny access to all other paths by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
